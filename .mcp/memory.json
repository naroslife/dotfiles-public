{"type":"entity","name":"Parallel Agent Orchestration Strategy","entityType":"Workflow Pattern","observations":["CRITICAL RULE: When orchestrating parallel agents, each agent MUST work in its own separate git worktree","Enforcement requirement: Agent prompts must include explicit working directory verification with pwd checks","Anti-pattern to avoid: Agents completing parallel work sequentially in main worktree","Lesson from 2025-01-13 session: Created worktrees ../headless-tui and ../headless-signal but agents didn't use them","Future requirement: Monitor that agents actually cd into their assigned worktrees before starting work","Integration strategy: Merge branches sequentially after each agent completes and passes tests","Benefits: True parallelization, conflict isolation, clean history, independent rollback capability","User prefers strict adherence to parallel orchestration patterns defined in Global CLAUDE.md","Violation detection: User actively monitors that agents follow worktree strategies","Enforcement context: This is not just a best practice but a CRITICAL requirement for this user"]}
{"type":"entity","name":"Code Quality Standards","entityType":"Development Practice","observations":["User enforces comprehensive error handling in shell scripts","Functions should be under 20-50 lines with single responsibility","Modules should be under 200 lines with clear domain separation","Test coverage should be >80% for critical paths","All code changes should be validated before committing"]}
{"type":"entity","name":"Nix Development Workflow","entityType":"Workflow Pattern","observations":["User structures Nix configs with modular architecture","Flake-based configurations preferred over legacy approaches","Dynamic user configuration generation for multi-user support","Platform-aware conditional loading (WSL, NVIDIA, etc.)","Validation with 'nix flake check' before applying changes"]}
{"type":"entity","name":"User Preferences","entityType":"Personal Preferences","observations":["IMPORTANT: This entity represents personal preferences across ALL machines and system usernames (uif58593, naroslife, enterpriseuser, etc.)","Working on headless SiL configuration generator project for automotive testing","Expects strict enforcement of parallel agent orchestration strategies","Requires agents working in parallel to use separate git worktrees, not the main worktree","Values proper isolation when orchestrating multiple agents for refactoring tasks","Caught that Agent A violated worktree strategy by working in main worktree instead of assigned ../headless-tui worktree during 2025-01-13 refactoring session","Emphasized: 'they have to work in separate worktrees next time' - indicating this is a critical requirement for future parallel work","Uses conventional commits format consistently across projects (feat:, fix:, docs:, refactor:, test:, chore:)","Values comprehensive documentation and expects it to be maintained alongside code","Prefers explicit over implicit code - clear names, obvious flow, direct dependencies","Expects tests to pass before committing changes","Runs quality checks before commits (nix flake check for Nix projects, test suites)","Prefers 2-space indentation for Nix, Shell, YAML, JSON; 4-space for Python","Uses Nix Home Manager for dotfiles management with flake-based configurations"]}
{"type":"entity","name":"MCP Memory Best Practices","entityType":"Documentation","observations":["Always use generic entity names that are not tied to specific system usernames","User identity should be 'User Preferences' not username-specific entities","Preferences and patterns should be portable across machines and usernames","System-specific details (like usernames) should only appear in observations when contextually necessary","Entity names should represent concepts, not system identifiers"]}
{"type":"relation","from":"Code Quality Standards","to":"Parallel Agent Orchestration Strategy","relationType":"includes"}
{"type":"relation","from":"Nix Development Workflow","to":"Code Quality Standards","relationType":"implements"}
{"type":"relation","from":"User Preferences","to":"Parallel Agent Orchestration Strategy","relationType":"requires strict adherence to"}
{"type":"relation","from":"User Preferences","to":"Code Quality Standards","relationType":"enforces"}
{"type":"relation","from":"User Preferences","to":"Nix Development Workflow","relationType":"follows"}
{"type":"relation","from":"MCP Memory Best Practices","to":"User Preferences","relationType":"governs creation of"}