{
  "cleanupPeriodDays": 30,
  "env": {
    "CLAUDE": "true",
    "MCP_TIMEOUT": "300000",
    "MCP_TOOL_TIMEOUT": "300000",
    "USE_BUILTIN_RIPGREP": "1"
  },
  "includeCoAuthoredBy": false,
  "permissions": {
    "allow": [
      "mcp__memory__read_graph",
      "mcp__serena__initial_instructions",
      "mcp__serena__check_onboarding_performed",
      "mcp__serena__onboarding",
      "mcp__serena__list_dir",
      "mcp__serena__write_memory",
      "mcp__serena__list_memories",
      "mcp__serena__read_memory",
      "mcp__sequential-thinking__sequentialthinking",
      "mcp__memory__add_observations",
      "mcp__memory__create_entities",
      "mcp__memory__create_relations",
      "mcp__memory__delete_entities",
      "Bash(mkdir:*)",
      "Bash(cp:*)",
      "Bash"
    ],
    "deny": []
  },
  "enabledMcpjsonServers": [
    "memory",
    "sequential-thinking",
    "fetch",
    "Ref",
    "filesystem",
    "serena",
    "markitdown",
    "filesystem-with-morph"
  ],
  "hooks": {
    "SessionStart": [
      {
        "matcher": "startup|resume",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'PROJECT_DIR=$(pwd); echo \"📂 Working directory: $PROJECT_DIR\"; if [[ ! -f \".mcp.json\" ]]; then echo \"🔧 Creating project-level .mcp.json for Serena...\"; cat > .mcp.json << '\"'\"'EOF'\"'\"'\n{\n  \"mcpServers\": {\n    \"serena\": {\n      \"type\": \"stdio\",\n      \"command\": \"uvx\",\n      \"args\": [\n        \"--from\",\n        \"git+https://github.com/oraios/serena\",\n        \"serena\",\n        \"start-mcp-server\",\n        \"--context\",\n        \"ide-assistant\",\n        \"--project\",\n        \".\"\n      ],\n      \"env\": {}\n    }\n  }\n}\nEOF\necho \"✅ Created .mcp.json with Serena configuration\"; echo \"⚠️  Please restart Claude Code to activate Serena for this project\"; else echo \"✅ Project .mcp.json exists\"; fi; if [[ -f \".serena/project.yml\" ]]; then PROJECT_NAME=$(grep \"^project_name:\" .serena/project.yml 2>/dev/null | awk \"{print \\$2}\" | tr -d \"\\\"\" || basename \"$PROJECT_DIR\"); echo \"✅ Serena project: $PROJECT_NAME\"; else echo \"ℹ️  Serena will create .serena/project.yml on first use\"; fi'"
          }
        ]
      }
    ],
    "Notification": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'TOOL_NAME=$(jq -r \".tool_name // \\\"Unknown\\\"\"); if command -v notify-send >/dev/null 2>&1; then notify-send -u normal -i terminal \"Claude Code\" \"Tool: $TOOL_NAME completed\"; elif command -v powershell.exe >/dev/null 2>&1; then powershell.exe -Command \"New-BurntToastNotification -Text '\"'\"'Claude Code'\"'\"', '\"'\"'Tool: $TOOL_NAME completed'\"'\"'\"; fi'"
          }
        ]
      }
    ],
    "PreCompact": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'if command -v notify-send >/dev/null 2>&1; then notify-send -u normal -i terminal \"Claude Code\" \"Compacting conversation history\"; elif command -v powershell.exe >/dev/null 2>&1; then powershell.exe -Command \"New-BurntToastNotification -Text '\"'\"'Claude Code'\"'\"', '\"'\"'Compacting conversation history'\"'\"'\"; fi'"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'FILE=$(jq -r .tool_input.file_path); if [[ \"$FILE\" =~ \\.(ts|tsx|js|jsx)$ ]]; then npx prettier --write \"$FILE\"; fi'"
          },
          {
            "type": "command",
            "command": "bash -c 'FILE=$(jq -r .tool_input.file_path); if [[ \"$FILE\" =~ \\.go$ ]]; then gofmt -w \"$FILE\"; fi'"
          },
          {
            "type": "command",
            "command": "bash -c 'FILE=$(jq -r .tool_input.file_path); if [[ \"$FILE\" =~ \\.(cpp|hpp|c|h)$ ]]; then clang-format --fallback-style=WebKit -i \"$FILE\"; fi'"
          },
          {
            "type": "command",
            "command": "bash -c 'FILE=$(jq -r .tool_input.file_path); if [[ \"$FILE\" =~ \\.py$ ]]; then black \"$FILE\"; fi'"
          },
          {
            "type": "command",
            "command": "bash -c 'FILE=$(jq -r .tool_input.file_path); if [[ \"$FILE\" =~ \\.rs$ ]]; then rustfmt \"$FILE\"; fi'"
          },
          {
            "type": "command",
            "command": "bash -c 'FILE=$(jq -r .tool_input.file_path); if [[ \"$FILE\" =~ \\.sh$ ]]; then shfmt -bn -ci -kp -w \"$FILE\" 2>/dev/null || true; fi'"
          },
          {
            "type": "command",
            "command": "bash -c 'FILE=$(jq -r .tool_input.file_path); if [[ \"$FILE\" == *\"flake.nix\" ]] || [[ \"$FILE\" == *\"home.nix\" ]]; then nix flake check 2>&1 | head -20; fi'"
          },
          {
            "type": "command",
            "command": "bash -c 'FILE=$(jq -r .tool_input.file_path); if [[ \"$FILE\" =~ \\.nix$ ]]; then nixfmt \"$FILE\" 2>/dev/null || nixpkgs-fmt \"$FILE\" 2>/dev/null || true; fi'"
          }
        ]
      }
    ],
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'CMD=$(jq -r .tool_input.command); BRANCH=$(git branch --show-current 2>/dev/null); if [[ \"$CMD\" =~ \"git commit\" ]] && [[ \"$BRANCH\" =~ ^(main|master)$ ]]; then echo \"Direct commits to main/master branch are not allowed\"; exit 2; fi'"
          },
          {
            "type": "command",
            "command": "bash -c 'DATA=$(cat); CMD=$(echo \"$DATA\" | jq -r .tool_input.command); DESC=$(echo \"$DATA\" | jq -r \"if .tool_input.description then .tool_input.description else \\\"No description\\\" end\"); echo \"$CMD - $DESC\" >> ~/.claude/bash-command-log.txt'"
          },
          {
            "type": "command",
            "command": "bash -c 'CMD=$(jq -r .tool_input.command); if [[ \"$CMD\" =~ \"git push.*--force\" ]] && ! [[ \"$CMD\" =~ \"--force-with-lease\" ]]; then echo \"Use --force-with-lease instead of --force for safer force pushes\"; exit 2; fi'"
          },
          {
            "type": "command",
            "command": "bash -c 'CMD=$(jq -r .tool_input.command); if [[ \"$CMD\" =~ \"rm -rf\" ]] && [[ \"$CMD\" =~ (/|~|\\$HOME) ]]; then echo \"Dangerous rm -rf detected on critical paths\"; exit 2; fi'"
          }
        ]
      }
    ]
  },
  "statusLine": {
    "type": "command",
    "command": "ccline",
    "padding": 0
  },
  "enabledPlugins": {
    "code-documentation@claude-code-workflows": true,
    "debugging-toolkit@claude-code-workflows": true,
    "backend-development@claude-code-workflows": true,
    "git-pr-workflows@claude-code-workflows": true,
    "full-stack-orchestration@claude-code-workflows": true,
    "tdd-workflows@claude-code-workflows": true,
    "unit-testing@claude-code-workflows": true,
    "code-review-ai@claude-code-workflows": true,
    "comprehensive-review@claude-code-workflows": true,
    "performance-testing-review@claude-code-workflows": true,
    "code-refactoring@claude-code-workflows": true,
    "dependency-management@claude-code-workflows": true,
    "error-debugging@claude-code-workflows": true,
    "error-diagnostics@claude-code-workflows": true,
    "agent-orchestration@claude-code-workflows": true,
    "context-management@claude-code-workflows": true,
    "observability-monitoring@claude-code-workflows": true,
    "application-performance@claude-code-workflows": true,
    "framework-migration@claude-code-workflows": true,
    "codebase-cleanup@claude-code-workflows": true,
    "documentation-generation@claude-code-workflows": true,
    "multi-platform-apps@claude-code-workflows": true,
    "python-development@claude-code-workflows": true,
    "systems-programming@claude-code-workflows": true,
    "shell-scripting@claude-code-workflows": true,
    "distributed-debugging@claude-code-workflows": true
  },
  "alwaysThinkingEnabled": true
}
