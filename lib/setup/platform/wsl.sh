#!/usr/bin/env bash
# WSL-Specific Optimizations
# Functions for Windows Subsystem for Linux configuration and optimization

set -euo pipefail

# Guard against multiple sourcing
if [[ -n "${WSL_SETUP_LOADED:-}" ]]; then
    return 0
fi
readonly WSL_SETUP_LOADED=1

# Source common utilities
_WSL_MODULE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# shellcheck source=lib/common.sh
source "$_WSL_MODULE_DIR/../../common.sh"

# Check if a setting exists in a specific INI section
# Args: $1=file, $2=section, $3=key
_wsl_conf_has_setting() {
    local file="$1"
    local section="$2"
    local key="$3"

    [[ ! -f "$file" ]] && return 1

    awk -v section="$section" -v key="$key" '
        /^\[.*\]$/ { current_section = substr($0, 2, length($0)-2); next }
        current_section == section && $0 ~ "^\\s*" key "\\s*=" { found=1; exit }
        END { exit !found }
    ' "$file"
}

# Get a setting value from a specific INI section
# Args: $1=file, $2=section, $3=key
_wsl_conf_get_value() {
    local file="$1"
    local section="$2"
    local key="$3"

    [[ ! -f "$file" ]] && return 1

    awk -v section="$section" -v key="$key" '
        /^\[.*\]$/ { current_section = substr($0, 2, length($0)-2); next }
        current_section == section && $0 ~ "^\\s*" key "\\s*=" {
            sub(/^[^=]*=\s*/, "");
            print;
            exit
        }
    ' "$file"
}

# Set a value in an INI section (creates section if needed)
# Args: $1=file, $2=section, $3=key, $4=value
_wsl_conf_set_value() {
    local file="$1"
    local section="$2"
    local key="$3"
    local value="$4"
    local temp_file="${file}.tmp"

    # Create file if it doesn't exist
    if [[ ! -f "$file" ]]; then
        sudo mkdir -p "$(dirname "$file")"
        echo "# Generated by dotfiles apply.sh" | sudo tee "$file" >/dev/null
    fi

    # Use awk to update the file
    awk -v section="$section" -v key="$key" -v value="$value" '
        BEGIN {
            in_target_section = 0
            found_key = 0
            section_exists = 0
        }

        # Track when we enter a section
        /^\[.*\]$/ {
            # If we were in target section but didnt find key, add it now
            if (in_target_section && !found_key) {
                print key " = " value
                found_key = 1
            }

            current = substr($0, 2, length($0)-2)
            if (current == section) {
                in_target_section = 1
                section_exists = 1
            } else {
                in_target_section = 0
            }
            print
            next
        }

        # If we are in the target section and find the key, replace it
        in_target_section && $0 ~ "^\\s*" key "\\s*=" {
            print key " = " value
            found_key = 1
            next
        }

        # Print all other lines
        { print }

        END {
            # If section exists but key wasnt found, we already added it
            # If section doesnt exist at all, create it and add key
            if (!section_exists) {
                print ""
                print "[" section "]"
                print key " = " value
            } else if (!found_key && in_target_section) {
                # We ended while in target section, add key
                print key " = " value
            }
        }
    ' "$file" | sudo tee "$temp_file" >/dev/null

    sudo mv "$temp_file" "$file"
}

# Fix WSL configuration in /etc/wsl.conf
# Returns: 0 if changes were made, 1 if no changes needed
fix_wsl_conf() {
    local wsl_conf="/etc/wsl.conf"
    local changes_made=false
    local settings_to_apply=()

    log_info "Checking WSL configuration in $wsl_conf"

    # Check [boot] systemd
    if ! _wsl_conf_has_setting "$wsl_conf" "boot" "systemd" || \
       [[ "$(_wsl_conf_get_value "$wsl_conf" "boot" "systemd")" != "true" ]]; then
        settings_to_apply+=("  [boot] systemd = true")
        changes_made=true
    fi

    # Check [interop] enabled
    if ! _wsl_conf_has_setting "$wsl_conf" "interop" "enabled" || \
       [[ "$(_wsl_conf_get_value "$wsl_conf" "interop" "enabled")" != "true" ]]; then
        settings_to_apply+=("  [interop] enabled = true")
        changes_made=true
    fi

    # Check [interop] appendWindowsPath
    if ! _wsl_conf_has_setting "$wsl_conf" "interop" "appendWindowsPath" || \
       [[ "$(_wsl_conf_get_value "$wsl_conf" "interop" "appendWindowsPath")" != "true" ]]; then
        settings_to_apply+=("  [interop] appendWindowsPath = true")
        changes_made=true
    fi

    # Check [automount] enabled
    if ! _wsl_conf_has_setting "$wsl_conf" "automount" "enabled" || \
       [[ "$(_wsl_conf_get_value "$wsl_conf" "automount" "enabled")" != "true" ]]; then
        settings_to_apply+=("  [automount] enabled = true")
        changes_made=true
    fi

    # Check [automount] options for metadata
    if ! _wsl_conf_has_setting "$wsl_conf" "automount" "options"; then
        settings_to_apply+=("  [automount] options = metadata,umask=22,fmask=11")
        changes_made=true
    else
        local current_options
        current_options=$(_wsl_conf_get_value "$wsl_conf" "automount" "options")
        if [[ ! "$current_options" =~ metadata ]]; then
            # Metadata not present, need to add it
            settings_to_apply+=("  [automount] options = metadata,umask=22,fmask=11")
            changes_made=true
        fi
    fi

    # If no changes needed, we're done
    if [[ "$changes_made" == "false" ]]; then
        log_info "WSL configuration already optimal"
        return 1
    fi

    # Show what will be changed
    log_info "The following WSL settings will be applied:"
    printf '%s\n' "${settings_to_apply[@]}"
    echo ""

    # Apply changes
    log_info "Applying WSL configuration changes (requires sudo)"

    _wsl_conf_set_value "$wsl_conf" "boot" "systemd" "true"
    _wsl_conf_set_value "$wsl_conf" "interop" "enabled" "true"
    _wsl_conf_set_value "$wsl_conf" "interop" "appendWindowsPath" "true"
    _wsl_conf_set_value "$wsl_conf" "automount" "enabled" "true"

    # Handle options - preserve existing if metadata already present
    local current_options
    current_options=$(_wsl_conf_get_value "$wsl_conf" "automount" "options" 2>/dev/null || echo "")
    if [[ -z "$current_options" ]] || [[ ! "$current_options" =~ metadata ]]; then
        _wsl_conf_set_value "$wsl_conf" "automount" "options" "metadata,umask=22,fmask=11"
    fi

    log_info "WSL configuration updated successfully"
    return 0
}

# WSL-specific optimizations
apply_wsl_optimizations() {
    if ! is_wsl; then
        return 0
    fi

    log_info "Applying WSL-specific optimizations"

    # Fix WSL configuration
    if fix_wsl_conf; then
        # Changes were made, need to restart WSL
        echo ""
        log_warn "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        log_warn "  WSL RESTART REQUIRED"
        log_warn "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        log_warn ""
        log_warn "WSL configuration has been updated. To apply these changes:"
        log_warn ""
        log_warn "  1. Exit all WSL terminals"
        log_warn "  2. From Windows PowerShell/CMD, run:"
        log_warn "     wsl --shutdown"
        log_warn "  3. Restart your WSL distribution"
        log_warn ""
        log_warn "See docs/WSL_SETUP.md for more details"
        log_warn "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""
    fi

    # Check if WSL init script exists and is executable
    local wsl_init_script="$ROOT_DIR/wsl-init.sh"
    if [[ -f "$wsl_init_script" && -x "$wsl_init_script" ]]; then
        log_info "Running WSL initialization script"
        if ! "$wsl_init_script"; then
            log_warn "WSL initialization script failed, continuing anyway"
        fi
    else
        log_debug "WSL init script not found or not executable: $wsl_init_script"
    fi
}
